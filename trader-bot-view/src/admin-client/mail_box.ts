// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "mail_box.proto" (package "mail_box", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mail_box.DeleteMailBoxRequest
 */
export interface DeleteMailBoxRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message mail_box.DeleteMailBoxResponse
 */
export interface DeleteMailBoxResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
    /**
     * @generated from protobuf field: string error_code = 20;
     */
    errorCode: string;
    /**
     * @generated from protobuf field: string error_message = 21;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message mail_box.GetMailBoxesResponse
 */
export interface GetMailBoxesResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
    /**
     * @generated from protobuf field: repeated mail_box.MailBoxSettings items = 2;
     */
    items: MailBoxSettings[];
    /**
     * @generated from protobuf field: string error_code = 20;
     */
    errorCode: string;
    /**
     * @generated from protobuf field: string error_message = 21;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message mail_box.UpsertMailBoxResponse
 */
export interface UpsertMailBoxResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
    /**
     * @generated from protobuf field: string error_code = 20;
     */
    errorCode: string;
    /**
     * @generated from protobuf field: string error_message = 21;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message mail_box.MailBoxSettings
 */
export interface MailBoxSettings {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
    /**
     * @generated from protobuf field: string binance_api_key = 4;
     */
    binanceApiKey: string;
    /**
     * @generated from protobuf field: string binance_api_secret = 5;
     */
    binanceApiSecret: string;
    /**
     * @generated from protobuf field: repeated string allowed_copy_from = 6;
     */
    allowedCopyFrom: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMailBoxRequest$Type extends MessageType<DeleteMailBoxRequest> {
    constructor() {
        super("mail_box.DeleteMailBoxRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteMailBoxRequest>): DeleteMailBoxRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteMailBoxRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteMailBoxRequest): DeleteMailBoxRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteMailBoxRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mail_box.DeleteMailBoxRequest
 */
export const DeleteMailBoxRequest = new DeleteMailBoxRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMailBoxResponse$Type extends MessageType<DeleteMailBoxResponse> {
    constructor() {
        super("mail_box.DeleteMailBoxResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "error_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteMailBoxResponse>): DeleteMailBoxResponse {
        const message = { result: false, errorCode: "", errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteMailBoxResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteMailBoxResponse): DeleteMailBoxResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                case /* string error_code */ 20:
                    message.errorCode = reader.string();
                    break;
                case /* string error_message */ 21:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteMailBoxResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        /* string error_code = 20; */
        if (message.errorCode !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.errorCode);
        /* string error_message = 21; */
        if (message.errorMessage !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mail_box.DeleteMailBoxResponse
 */
export const DeleteMailBoxResponse = new DeleteMailBoxResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMailBoxesResponse$Type extends MessageType<GetMailBoxesResponse> {
    constructor() {
        super("mail_box.GetMailBoxesResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MailBoxSettings },
            { no: 20, name: "error_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetMailBoxesResponse>): GetMailBoxesResponse {
        const message = { result: false, items: [], errorCode: "", errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMailBoxesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMailBoxesResponse): GetMailBoxesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                case /* repeated mail_box.MailBoxSettings items */ 2:
                    message.items.push(MailBoxSettings.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string error_code */ 20:
                    message.errorCode = reader.string();
                    break;
                case /* string error_message */ 21:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMailBoxesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        /* repeated mail_box.MailBoxSettings items = 2; */
        for (let i = 0; i < message.items.length; i++)
            MailBoxSettings.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string error_code = 20; */
        if (message.errorCode !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.errorCode);
        /* string error_message = 21; */
        if (message.errorMessage !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mail_box.GetMailBoxesResponse
 */
export const GetMailBoxesResponse = new GetMailBoxesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertMailBoxResponse$Type extends MessageType<UpsertMailBoxResponse> {
    constructor() {
        super("mail_box.UpsertMailBoxResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "error_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpsertMailBoxResponse>): UpsertMailBoxResponse {
        const message = { result: false, errorCode: "", errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpsertMailBoxResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertMailBoxResponse): UpsertMailBoxResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                case /* string error_code */ 20:
                    message.errorCode = reader.string();
                    break;
                case /* string error_message */ 21:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertMailBoxResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        /* string error_code = 20; */
        if (message.errorCode !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.errorCode);
        /* string error_message = 21; */
        if (message.errorMessage !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mail_box.UpsertMailBoxResponse
 */
export const UpsertMailBoxResponse = new UpsertMailBoxResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MailBoxSettings$Type extends MessageType<MailBoxSettings> {
    constructor() {
        super("mail_box.MailBoxSettings", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "binance_api_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "binance_api_secret", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "allowed_copy_from", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MailBoxSettings>): MailBoxSettings {
        const message = { name: "", username: "", password: "", binanceApiKey: "", binanceApiSecret: "", allowedCopyFrom: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MailBoxSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MailBoxSettings): MailBoxSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                case /* string binance_api_key */ 4:
                    message.binanceApiKey = reader.string();
                    break;
                case /* string binance_api_secret */ 5:
                    message.binanceApiSecret = reader.string();
                    break;
                case /* repeated string allowed_copy_from */ 6:
                    message.allowedCopyFrom.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MailBoxSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        /* string binance_api_key = 4; */
        if (message.binanceApiKey !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.binanceApiKey);
        /* string binance_api_secret = 5; */
        if (message.binanceApiSecret !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.binanceApiSecret);
        /* repeated string allowed_copy_from = 6; */
        for (let i = 0; i < message.allowedCopyFrom.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.allowedCopyFrom[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mail_box.MailBoxSettings
 */
export const MailBoxSettings = new MailBoxSettings$Type();
/**
 * @generated ServiceType for protobuf service mail_box.MailBoxGrpc
 */
export const MailBoxGrpc = new ServiceType("mail_box.MailBoxGrpc", [
    { name: "GetMailBoxes", options: {}, I: Empty, O: GetMailBoxesResponse },
    { name: "UpsertMailBox", options: {}, I: MailBoxSettings, O: UpsertMailBoxResponse },
    { name: "DeleteMailBox", options: {}, I: DeleteMailBoxRequest, O: DeleteMailBoxResponse }
]);
