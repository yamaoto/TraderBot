// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "admin.proto" (package "admin", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message admin.Order
 */
export interface Order {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string trading_symbol = 2;
     */
    tradingSymbol: string;
    /**
     * @generated from protobuf field: string order_side = 3;
     */
    orderSide: string;
    /**
     * @generated from protobuf field: string price = 4;
     */
    price: string;
    /**
     * @generated from protobuf field: string quantity = 5;
     */
    quantity: string;
    /**
     * @generated from protobuf field: string from = 6;
     */
    from: string;
    /**
     * @generated from protobuf field: string createdAt = 7;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message admin.GetOrdersResponse
 */
export interface GetOrdersResponse {
    /**
     * @generated from protobuf field: repeated admin.Order orders = 1;
     */
    orders: Order[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Order$Type extends MessageType<Order> {
    constructor() {
        super("admin.Order", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trading_symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "order_side", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "quantity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Order>): Order {
        const message = { id: "", tradingSymbol: "", orderSide: "", price: "", quantity: "", from: "", createdAt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Order>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Order): Order {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string trading_symbol */ 2:
                    message.tradingSymbol = reader.string();
                    break;
                case /* string order_side */ 3:
                    message.orderSide = reader.string();
                    break;
                case /* string price */ 4:
                    message.price = reader.string();
                    break;
                case /* string quantity */ 5:
                    message.quantity = reader.string();
                    break;
                case /* string from */ 6:
                    message.from = reader.string();
                    break;
                case /* string createdAt */ 7:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Order, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string trading_symbol = 2; */
        if (message.tradingSymbol !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tradingSymbol);
        /* string order_side = 3; */
        if (message.orderSide !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.orderSide);
        /* string price = 4; */
        if (message.price !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.price);
        /* string quantity = 5; */
        if (message.quantity !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.quantity);
        /* string from = 6; */
        if (message.from !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.from);
        /* string createdAt = 7; */
        if (message.createdAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message admin.Order
 */
export const Order = new Order$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOrdersResponse$Type extends MessageType<GetOrdersResponse> {
    constructor() {
        super("admin.GetOrdersResponse", [
            { no: 1, name: "orders", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Order }
        ]);
    }
    create(value?: PartialMessage<GetOrdersResponse>): GetOrdersResponse {
        const message = { orders: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOrdersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOrdersResponse): GetOrdersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated admin.Order orders */ 1:
                    message.orders.push(Order.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOrdersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated admin.Order orders = 1; */
        for (let i = 0; i < message.orders.length; i++)
            Order.internalBinaryWrite(message.orders[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message admin.GetOrdersResponse
 */
export const GetOrdersResponse = new GetOrdersResponse$Type();
/**
 * @generated ServiceType for protobuf service admin.AdminGrpc
 */
export const AdminGrpc = new ServiceType("admin.AdminGrpc", [
    { name: "GetOrders", options: {}, I: Empty, O: GetOrdersResponse }
]);
